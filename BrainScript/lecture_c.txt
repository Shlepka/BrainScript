Функция 

Пожалуй, самая простая и короткая программа на C++ — это программа, которая ничего не делает. Она выглядит так:
int main() {
	    return 0;
	}
Здесь определяется функция с именем main, которая не принимает никаких аргументов (внутри круглых скобок ничего нет) и не выполняет никаких содержательных команд. В каждой программе на C++ должна быть ровно одна функция main — с неё начинается выполнение программы.
У функции указан тип возвращаемого значения int (целое число), и она возвращает 0 — в данном случае это сообщение для операционной системы, что программа выполнилась успешно. И наоборот, ненулевой код возврата означает, что при выполнении возникла ошибка (например, программа получила некорректные входные данные).
Для функции main разрешается не писать завершающий return 0, чем мы и будем пользоваться далее для краткости. Поэтому самую короткую программу можно было бы написать вот так:
int main() {
	}

Комментарии

Комментарии — это фрагменты программы, которые игнорируются компилятором и предназначены для программиста. В C++ есть два вида комментариев — однострочные и многострочные:
int main() {  // однострочный комментарий продолжается до конца строки
	 
/* Пример
  многострочного 
комментария */ }

Библиотеки и заголовочные файлы

Библиотека — это код, который можно переиспользовать в разных программах. В стандарт языка C++ входит спецификация так называемой стандартной библиотеки, которая поставляется вместе с компилятором. Она содержит различные структуры данных (контейнеры), типовые алгоритмы, средства ввода-вывода и т. д. Конструкции из этой библиотеки предваряются префиксом std::, который обозначает пространство имён.
Чтобы воспользоваться теми или иными библиотечными конструкциями, в начале программы надо подключить нужные заголовочные файлы. Так, в программе, которая печатала Hello, world!, нам уже встречался заголовочный файл iostream и конструкция std::cout из стандартной библиотеки.
Для C++ существует также множество сторонних библиотек. Наиболее известной коллекцией сторонних библиотек для C++ является Boost.
Переменные

Любая содержательная программа так или иначе обрабатывает данные в памяти. Переменная — это именованный блок данных определённого типа. Чтобы определить переменную, нужно указать её тип и имя.
Например:
#include <string>  // библиотека, в которой определён тип std::string
	 
	int main() {
	    // Определяем переменную value целочисленного типа int
	    int value;
	 
	    // Определяем переменные name и surname типа std::string (текстовая строка)
	    std::string name, surname;
	}
В этом примере мы используем встроенный в язык тип int (от слова integer — целое число) и поставляемый со стандартной библиотекой тип std::string. (Можно было бы использовать для строк встроенный тип с массивом символов, но это неудобно.)
Тип переменной должен быть известен компилятору во время компиляции.
От типа зависит:
•	сколько байтов памяти потребуется для хранения данных;
•	как интерпретировать эти байты;
•	какие операции с этой переменной возможны.
Например, переменной типа int можно присваивать значения и с ней можно производить арифметические операции. Подробнее про разные типы данных и их размер в памяти мы поговорим ниже.
Важно понимать, что тип остаётся с переменной навсегда. Например, присвоить целочисленной переменной строку не получится — это вызовет ошибку компиляции:
int main() {
	    int value;
	    value = 42;  // OK
	    value = "Hello!";  // ошибка компиляции!
	}
Переменные можно сразу проинициализировать значением. В С++ есть много разных способов инициализации. Нам пока будет достаточно способа, который называется copy initialization:
#include <string>
	 
	int main() {
	    int value = 42;
	    std::string title = "Bjarne Stroustrup";
	}
Если переменная была объявлена, но нигде дальше не использовалась, то компилятор выдаёт об этом предупреждение. При проверке решений мы используем опцию -Werror, которая считает предупреждения компилятора ошибками компиляции.

Потоковый ввод и вывод

Поток — это абстракция для чтения и записи последовательности данных в форматированном виде.
Записывать данные можно на экран консоли, в файл, буфер в памяти или в строку. Считывать их можно с клавиатуры, из файла, из памяти. Причём с каждым таким «устройством» можно связать свой поток.
Важно, что потоки не просто пересылают байты памяти, а применяют форматированный человекочитаемый ввод-вывод. Например, числа печатаются и считываются в десятичной нотации, хотя в памяти компьютера они хранятся в двоичном виде.
В программе Hello, world! нам уже встречался поток вывода std::cout, по умолчанию связанный с экраном консоли. Познакомимся с потоком ввода std::cin, связанным с клавиатурой. Для его использования нужен тот же заголовочный файл iostream.
Рассмотрим программу, которая спрашивает имя пользователя и печатает персональное приветствие:
#include <iostream>
	#include <string>
	 
	int main() {
	    std::string name;  // объявляем переменную name
	    std::cout << "What is your name?\n";
	    std::cin >> name;  // считываем её значение с клавиатуры
	    std::cout << "Hello, " << name << "!\n";
	}
Обратите внимание на направление угловых скобок в этом примере — они условно показывают направление потока данных. При печати данные выводятся на экран, и стрелки направлены от текста к cout. При вводе данные поступают с клавиатуры, и стрелки направлены от cin к переменной.
В нашем примере в переменную name считается одно слово, которое будет выведено в ответном сообщении. Пример работы программы:
What is your name?
Alice
Hello, Alice!
Однако если ввести строку из нескольких слов с пробелами, то в name запишется только первое слово:
$ ./a.out
What is your name?
Alice Liddell
Hello, Alice!
Дело в том, что cin читает поток данных до ближайшего пробельного разделителя (пробела, табуляции, перевода строки или просто конца файла). Чтобы считать в строковую переменную всю строчку целиком (не включая завершающий символ перевода строки), нужно использовать функцию std::getline из заголовочного файла string:
	#include <iostream>
	#include <string>
	
	int main() {
	std::string name;
	std::getline(std::cin, name);
	std::cout << "Hello, " << name << "!\n";
	}
В этом примере мы печатаем в одном выражении друг за другом несколько строк ("Hello, ", name и "!\n"), разделённых угловыми скобками <<. Таким образом, cin и cout позволяют кратко считывать и печатать несколько объектов одной командой.
Например, считывание нескольких чисел целого типа, набранных через пробельные разделители, может выглядеть так:
	int main() {
	int a;
	int b;
	int c;
	std::cin >> a >> b >> c;
	}
Напечатать их значения можно следующим образом:
	std::cout << a << " " << b << " " << c << "\n";
Обратите внимание, что мы дополнительно вставляем между ними пробелы, чтобы в выводе числа не слиплись вместе. В конце вывода мы вставляем символ перевода строки \n, чтобы отделить этот результат от последующего вывода или от сообщений командной строки.

