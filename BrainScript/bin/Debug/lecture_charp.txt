Литералы в языке C#

Литералами являются некоторые виды данных в языке. Это те значения, которые обрабатываются операторами языка, присваиваются переменным и возвращаются в результате обработки. Любая программа представляет собой получение первоначальных значений литералов, их обработку и выдачу готового результата, который выражается этими самыми литералами.
Литералы C# бывают следующих видов:
Десятичные: 1, 2, 34, 1289, 444, 53454, 21…;
Шестнадцатиричные: 0*E5, 0*F2, A, F, F8…;
С плавающей точкой: 1.54, 234.54, 4.3…;
Символы, обрамленные одинарными кавычками: ‘a’, ‘v’, ‘r’, ‘D’, ‘A’, ‘Ф’, «2», «0» и другие символы юникода;
Строки, обрамленные в парные кавычки: «My name is Daniel», «Hello everybody!», «сколько времени?»;
Символы экранирования: \u(и символ юникода), \n, \t, \r, \f, \\, и другие. Используются для редактирования вывода строк на экран.

Переменные

Переменная представляет собой ссылку на область памяти, где хранятся литералы определенного типа. Имя переменной является идентификатор, который может иметь произвольный набор символов в соответствии с правилами синтаксиса C#. В языке присутствует как строгая, так и динамическая типизация. Переменные могут быть определенного типа или без него. Объявление типизированной переменной начинается с установки ее типа: int, string, boolean и т.п. Затем пишется идентификатор.
Пример:
int num; // объявлена переменная типа int с идентификатором num, в которую можно сохранить значение исключительно типа int
float num_float;
char letter;
string word;
var some_var; // объявление переменной без явного указания ее типа
Инициализация переменной — присвоение ей значения (литерала) того типа, в котором она объявлена. Переменные могут быть инициализированы при объявлении или динамически во время выполнения программы. В примере выше были объявлены переменные без инициализации. Теперь рассмотрим пример объявления переменных с инициализацией.
Пример:
int digit = 24; // присвоение переменной целочисленного литерала во время ее объявления
string name = «Fred»;
char some_symbol = «s»;
// объявление, а затем инициализация в коде
int d; // простое объявление целочисленной переменной
d = 349; // присвоение (инициализация) в коде программы

Константы в C#

Константой является идентификатор, значение которого фиксировано. То есть — значение константе дается один раз и не может быть изменено во время выполнения программы и не может быть присвоено новое значение. Сама константа состоит из ключевого слова const, типа, идентификатора и присвоенного литерала.
Пример:
//объявим константу без инициализации
const double digit;
// с инициализацией
const string company_name = «General Motors»;
company_name = «Hello»; // ошибка — литерал константы не может быть изменен и предназначен только для чтения
Также константой могут являться и свойства объектов. Значение этих свойств уже не может быть изменено. Альтернативой являются свойства, объявленные с ключевым словом readonly.

Блоки

Блок в C# это написанный алгоритм в отдельном контексте от глобального. Блок создается операторами {} — первая скобка открывает блок, вторая закрывает его. Глобальным контекстом является блок функции Main. В ее пределах или за ним другие блоки создают локальный контекст. Блоки внутри функций также обладают сублокальным контекстом.
Пример:
public static void Main(){ // глобальный контекст (блок)
string g = «Hello!»; // глобальная переменная
{
string g = «Hy!»; // блок локального контекста
}
Console.print(g); // ошибка — в глобальном контексте нет переменной g и она находится в области видимости глобального контекста
}
static int func(){
int x = 6; // локальная переменная в локальном контексте
}

Основная структура всех программ в C#

Программы на C# состоят из классов. Основной алгоритм выполняется внутри функции Main. Классы хранятся в пространствах имен (namespaces) и внутри других классов. Классы содержат различные данные и функции. Классы внутри себя могут содержать другие классы. Пространства имен можно подключать к основной программе для доступа к функционалу различных классов. Основная программа состоит из пространства имен, основного класса с методом Main.

Главный метод Main

Метод Main по умолчанию является экземпляром основного класса программы. Он вызывается по умолчанию при запуске программы. Вне метода Main описываются другие классы и функции. В методе Main создаются объекты, обрабатываются данные, вызываются функции, создаются объекты. Данный метод может быть двух типов: не возражающий значение и возвращающий 0 при успешном выполнении программы.
Пример:
// пример без возврата значения
public static void Main(){ // метод всегда статический, а ключевое слово void говорит о том, что метод ничего не возвращает
// здесь пишется основной алгоритм
}
// пример с возвратом значения
public static int Main(){ // int обозначает, что метод возвращает целое число
return 0; // возврат ноля если код выполнился без ошибок
}
Операторы языка C#

Операторы в C# и в программировании в целом — это основной инструмент обработки литералов. Операторы позволяют проводить математические операции над числовыми литералами, различные операции над текстом, создавать условия для выполнения определенного участка кода, отделять блок кода и многое другое.
В языке C# существует 16 категорий операторов:
Арифметические: +(прибавить), -(отнять), /(разделить), *(умножить), %(получение остатка от деления). Данные операторы применяются для выполнения арифметических действий над целыми числами и числами с плавающей точкой.
Конкатенация: +(соединение строк). Применяют для сложения двух строк в дону: «Hello»+»World» = «HelloWorld».
Логические: &&(true и true = true — оператор «и»), ||(true = если есть хоть одно true — оператор «или»), !(не true = true — оператор «не»). Применяются как в условных конструкциях, так и простых логических выражениях, результат всегда true или false.
Энкримент, декримент: ++(прибавить 1), —(отнять 1). Используются для сокращенной записи арифметического выражения x = x+1(++), x = x-1(—).
Присвоение: =(присвоить значение) += или -=(сокращенная запись прибавления или отнятия с присвоением), *= или /= (умножение или деление с присвоением), %=(присвоение остатка от деления), &=, ||=, ^=, >>=, <<=(побитовые операции с присвоением). Применяются для присвоения данных переменным, а также результатов выражений. Оператор с присвоением является сокращенной записью x=x+число, то же, что и x+=число.
Побитовые операторы: &(0 и 0 = 1 или 0 и 1 = 0 — оператор «и»), ||(0 или 0 = 0, 1 или 0 = 1 — оператор «или»), ^(0 = 1, 1 = 0 — оператор «инверсия»). Конвертируют числа или строки в двоичную систему исчисления и сравнивают значения битов. Каждое сравнение возвращает 0 или 1. Итоговый результат состоит возвращается числом или строкой переведенной из ряда получившихся битов.
Доступ к экземплярам классов, объектов, структур: точка. Используется для доступа к свойствам и методам объектов, а также статическим членам классов.
Квадратные скобки []. Используются для индексации массивов и экземпляров объектов.
Фигурные скобки {}. Отделяют блок кода в функциях, циклах, классах и структурах, списках.
Круглые скобки (). Вызов функций и методов, приведение типов, отделение приоритетов выполнения арифметических выражений.
Операторы сокращенной условной конструкции: ? и :.
Оператор создания нового объекта: new. Применяется в функциях конструкторах при создании новых объектов.
Проверка литералов на тип: typeof sizeof, is, as. Результатом проверки является строка указывающая на тип литерала (x = 5, typeof x = int).
Проверка на переполнение: checked, unchecked. Возвращают true или false.
Операции с указателями: * -> [] &.
Операторы сравнения: < и >(меньше и больше), <= и >= (меньше или равно, больше или равно), !=(неравно).

Типы данных в C#

Типы данных — это типы литералов, которые поддерживает тот или иной язык. Литералы являются костяком программирования, так как за счет обработки данных и создаются рабочие программы.
Всего в C# 6 типов данных:
Целые числа: int, uint, long, ulong, byte, sbyte, short, ushort — каждый из них отличается только размером отводимой памяти для литерала.
Числа с плавающей точкой: float, double, decimal.
Символьный тип: char — буква или цифра обрамленная в одинарные кавычки
Строковой: String — обычный текст обрамленный в двойные качки из любых символов юникода, являющийся массивом символов
Объекты: Object — любой из перечисленных типов данных для которых отводится 4 байта в 32-разрядной операционной системе и 8 байт в 64-х.
Логические: bool — true или false.

Явное и неявное преобразование типов

Поскольку C # статически типизируется во время компиляции, после объявления переменной ее нельзя объявить снова или присвоить значение другого типа, если этот тип не является неявно преобразованным в тип переменной. Например, string нельзя неявно преобразовать в int. Следовательно, после того, как вы объявляете iобъект int, вы не можете присвоить ему строку «Hello». 
Однако иногда может потребоваться скопировать значение в параметр переменной или метода другого типа. Например, у вас может быть целочисленная переменная, которую нужно передать методу, параметр которого имеет тип double. Или вам может потребоваться присвоить переменную класса переменной типа интерфейса. Такие операции называются преобразованием типов.
В C # вы можете выполнять следующие виды преобразований:
Неявные преобразования: специального синтаксиса не требуется, поскольку преобразование всегда выполняется успешно и данные не теряются. Примеры включают преобразования из меньших целочисленных типов в большие и преобразования из производных классов в базовые классы.
Явные преобразования (приведения) : для явных преобразований требуется выражение приведения . Трансляция требуется, когда информация может быть потеряна при преобразовании или когда преобразование не удалось выполнить по другим причинам. Типичные примеры включают числовое преобразование в тип с меньшей точностью или меньшим диапазоном, а также преобразование экземпляра базового класса в производный класс.
Пользовательские преобразования . Пользовательские преобразования выполняются с помощью специальных методов, которые можно определить для включения явных и неявных преобразований между пользовательскими типами, которые не имеют отношения между базовым классом и производным классом. Дополнительные сведения см. В разделе Операторы преобразования, определяемые пользователем.
Преобразования с помощью вспомогательных классов : для преобразования между несовместимыми типами, такими как целые числа и объекты System.DateTime , или шестнадцатеричные строки и байтовые массивы, вы можете использовать класс System.BitConverter, класс System.Convert и Parseметоды встроенного -в числовых типах, таких как Int32.Parse . Дополнительные сведения см. В разделах Как преобразовать массив байтов в int , Как преобразовать строку в число и Как преобразовать между шестнадцатеричными строками и числовыми типами





